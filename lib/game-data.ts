export const gameData = {
  html: [
    // Easy Levels (1-10)
    {
      id: 1,
      title: "Basic HTML Structure",
      difficulty: "Easy" as const,
      description: "What is the correct way to declare an HTML5 document?",
      question: "Which declaration is used to define an HTML5 document?",
      options: ["<!DOCTYPE html>", "<!DOCTYPE HTML5>", "<html version='5'>", "<!HTML5>"],
      correctAnswer: 0,
      explanation:
        "<!DOCTYPE html> is the correct HTML5 document type declaration. It tells the browser that this is an HTML5 document.",
    },
    {
      id: 2,
      title: "HTML Headings",
      difficulty: "Easy" as const,
      description: "Understanding HTML heading hierarchy",
      question: "Which heading tag represents the largest heading?",
      options: ["<h6>", "<h3>", "<h1>", "<heading>"],
      correctAnswer: 2,
      explanation: "<h1> represents the largest heading in HTML. Headings go from <h1> (largest) to <h6> (smallest).",
    },
    {
      id: 3,
      title: "HTML Paragraphs",
      difficulty: "Easy" as const,
      description: "Learn about paragraph elements",
      question: "Which tag is used to create a paragraph in HTML?",
      options: ["<paragraph>", "<p>", "<para>", "<text>"],
      correctAnswer: 1,
      explanation:
        "The <p> tag is used to create paragraphs in HTML. It automatically adds spacing before and after the paragraph.",
    },
    {
      id: 4,
      title: "HTML Links",
      difficulty: "Easy" as const,
      description: "Creating hyperlinks in HTML",
      question: "Which attribute is used in the <a> tag to specify the URL?",
      options: ["url", "link", "href", "src"],
      correctAnswer: 2,
      explanation: "The 'href' attribute in the <a> tag specifies the URL of the page the link goes to.",
    },
    {
      id: 5,
      title: "HTML Images",
      difficulty: "Easy" as const,
      description: "Embedding images in HTML",
      question: "Which tag is used to display images in HTML?",
      options: ["<image>", "<img>", "<picture>", "<photo>"],
      correctAnswer: 1,
      explanation:
        "The <img> tag is used to embed images in HTML. It's a self-closing tag that requires a 'src' attribute.",
    },
    {
      id: 6,
      title: "HTML Lists",
      difficulty: "Easy" as const,
      description: "Creating ordered and unordered lists",
      question: "Which tag creates an unordered (bulleted) list?",
      options: ["<ol>", "<ul>", "<list>", "<li>"],
      correctAnswer: 1,
      explanation: "<ul> creates an unordered list with bullet points, while <ol> creates an ordered (numbered) list.",
    },
    {
      id: 7,
      title: "HTML Text Formatting",
      difficulty: "Easy" as const,
      description: "Making text bold and italic",
      question: "Which tag makes text bold in HTML?",
      options: ["<bold>", "<b>", "<strong>", "Both <b> and <strong>"],
      correctAnswer: 3,
      explanation: "Both <b> and <strong> make text bold, but <strong> also indicates semantic importance.",
    },
    {
      id: 8,
      title: "HTML Comments",
      difficulty: "Easy" as const,
      description: "Adding comments to HTML code",
      question: "How do you write a comment in HTML?",
      options: ["// This is a comment", "/* This is a comment */", "<!-- This is a comment -->", "# This is a comment"],
      correctAnswer: 2,
      explanation: "HTML comments are written as <!-- comment text -->. They are not displayed in the browser.",
    },
    {
      id: 9,
      title: "HTML Line Breaks",
      difficulty: "Easy" as const,
      description: "Creating line breaks and horizontal rules",
      question: "Which tag creates a line break in HTML?",
      options: ["<break>", "<br>", "<lb>", "<newline>"],
      correctAnswer: 1,
      explanation: "The <br> tag creates a line break. It's a self-closing tag that doesn't require a closing tag.",
    },
    {
      id: 10,
      title: "HTML Attributes",
      difficulty: "Easy" as const,
      description: "Understanding HTML attributes",
      question: "What is the purpose of the 'alt' attribute in an <img> tag?",
      options: [
        "To specify the image width",
        "To provide alternative text for screen readers",
        "To set the image height",
        "To add a border to the image",
      ],
      correctAnswer: 1,
      explanation:
        "The 'alt' attribute provides alternative text for images, which is important for accessibility and SEO.",
    },

    // Medium Levels (11-20)
    {
      id: 11,
      title: "HTML Tables",
      difficulty: "Medium" as const,
      description: "Creating tables in HTML",
      question: "Which tag is used to create a table row?",
      options: ["<row>", "<tr>", "<table-row>", "<trow>"],
      correctAnswer: 1,
      explanation: "<tr> stands for 'table row' and is used to create rows in HTML tables.",
    },
    {
      id: 12,
      title: "HTML Forms",
      difficulty: "Medium" as const,
      description: "Creating forms for user input",
      question: "Which input type is used for password fields?",
      options: ["type='text'", "type='password'", "type='hidden'", "type='secure'"],
      correctAnswer: 1,
      explanation: "type='password' creates a password input field where characters are masked for security.",
    },
    {
      id: 13,
      title: "HTML Div and Span",
      difficulty: "Medium" as const,
      description: "Understanding container elements",
      question: "What is the main difference between <div> and <span>?",
      options: [
        "<div> is inline, <span> is block",
        "<div> is block, <span> is inline",
        "They are exactly the same",
        "<div> is for text, <span> is for images",
      ],
      correctAnswer: 1,
      explanation:
        "<div> is a block-level element that takes full width, while <span> is inline and only takes necessary width.",
    },
    {
      id: 14,
      title: "HTML5 Semantic Elements",
      difficulty: "Medium" as const,
      description: "Using semantic HTML5 elements",
      question: "Which HTML5 element represents the main content of a document?",
      options: ["<content>", "<main>", "<primary>", "<body>"],
      correctAnswer: 1,
      explanation:
        "The <main> element represents the main content of a document, excluding headers, footers, and sidebars.",
    },
    {
      id: 15,
      title: "HTML Form Validation",
      difficulty: "Medium" as const,
      description: "HTML5 form validation attributes",
      question: "Which attribute makes a form field required?",
      options: ["mandatory", "required", "needed", "must-fill"],
      correctAnswer: 1,
      explanation: "The 'required' attribute makes a form field mandatory before the form can be submitted.",
    },
    {
      id: 16,
      title: "HTML Select Elements",
      difficulty: "Medium" as const,
      description: "Creating dropdown menus",
      question: "Which tag is used inside <select> to create options?",
      options: ["<choice>", "<item>", "<option>", "<select-item>"],
      correctAnswer: 2,
      explanation: "The <option> tag is used inside <select> elements to create individual choices in dropdown menus.",
    },
    {
      id: 17,
      title: "HTML Textarea",
      difficulty: "Medium" as const,
      description: "Multi-line text input",
      question: "How do you specify the number of visible rows in a textarea?",
      options: ["height attribute", "rows attribute", "lines attribute", "size attribute"],
      correctAnswer: 1,
      explanation: "The 'rows' attribute specifies the visible number of lines in a textarea element.",
    },
    {
      id: 18,
      title: "HTML Meta Tags",
      difficulty: "Medium" as const,
      description: "Understanding meta information",
      question: "Which meta tag is used to set the character encoding?",
      options: ["<meta encoding='utf-8'>", "<meta charset='utf-8'>", "<meta character='utf-8'>", "<meta type='utf-8'>"],
      correctAnswer: 1,
      explanation: "<meta charset='utf-8'> sets the character encoding for the HTML document.",
    },
    {
      id: 19,
      title: "HTML Nested Elements",
      difficulty: "Medium" as const,
      description: "Properly nesting HTML elements",
      question: "Which nesting is correct?",
      options: [
        "<p><strong>Bold text</p></strong>",
        "<strong><p>Bold text</strong></p>",
        "<p><strong>Bold text</strong></p>",
        "<strong><p>Bold text</p></strong>",
      ],
      correctAnswer: 2,
      explanation: "Elements must be properly nested. <p><strong>Bold text</strong></p> is the correct nesting.",
    },
    {
      id: 20,
      title: "HTML Table Headers",
      difficulty: "Medium" as const,
      description: "Creating table headers",
      question: "Which tag is used for table headers?",
      options: ["<header>", "<th>", "<td>", "<table-header>"],
      correctAnswer: 1,
      explanation: "<th> stands for 'table header' and is used to create header cells in tables.",
    },

    // High Levels (21-27)
    {
      id: 21,
      title: "HTML5 Media Elements",
      difficulty: "High" as const,
      description: "Embedding audio and video",
      question: "Which attribute enables video controls in HTML5?",
      options: ["controls='true'", "controls", "show-controls", "enable-controls"],
      correctAnswer: 1,
      explanation: "The 'controls' attribute (boolean) adds play, pause, and volume controls to video/audio elements.",
    },
    {
      id: 22,
      title: "HTML5 Canvas",
      difficulty: "High" as const,
      description: "Understanding the canvas element",
      question: "What is the HTML5 canvas element used for?",
      options: ["Creating forms", "Drawing graphics with JavaScript", "Displaying images", "Creating tables"],
      correctAnswer: 1,
      explanation: "The <canvas> element is used to draw graphics on the fly via JavaScript.",
    },
    {
      id: 23,
      title: "HTML5 SVG",
      difficulty: "High" as const,
      description: "Scalable Vector Graphics",
      question: "What does SVG stand for?",
      options: [
        "Simple Vector Graphics",
        "Scalable Vector Graphics",
        "Standard Vector Graphics",
        "Styled Vector Graphics",
      ],
      correctAnswer: 1,
      explanation: "SVG stands for Scalable Vector Graphics, used for creating vector-based graphics in HTML.",
    },
    {
      id: 24,
      title: "HTML Iframe",
      difficulty: "High" as const,
      description: "Embedding external content",
      question: "What security attribute can be used with iframe?",
      options: ["secure", "sandbox", "protected", "safe"],
      correctAnswer: 1,
      explanation: "The 'sandbox' attribute applies security restrictions to iframe content.",
    },
    {
      id: 25,
      title: "HTML Data Attributes",
      difficulty: "High" as const,
      description: "Custom data attributes",
      question: "How do you create a custom data attribute?",
      options: ["custom-name='value'", "data-name='value'", "attr-name='value'", "meta-name='value'"],
      correctAnswer: 1,
      explanation: "Custom data attributes start with 'data-' followed by your custom name.",
    },
    {
      id: 26,
      title: "HTML5 Progress Element",
      difficulty: "High" as const,
      description: "Creating progress indicators",
      question: "Which attribute sets the maximum value for a progress element?",
      options: ["maximum", "max", "limit", "top"],
      correctAnswer: 1,
      explanation: "The 'max' attribute specifies the maximum value of the progress element.",
    },
    {
      id: 27,
      title: "HTML5 Details Element",
      difficulty: "High" as const,
      description: "Creating collapsible content",
      question: "Which element is used inside <details> for the visible heading?",
      options: ["<title>", "<summary>", "<header>", "<caption>"],
      correctAnswer: 1,
      explanation: "The <summary> element provides a visible heading for the <details> element.",
    },

    // Very High Levels (28-30)
    {
      id: 28,
      title: "HTML Web Components",
      difficulty: "Very High" as const,
      description: "Understanding web components",
      question: "What is required for custom element names?",
      options: [
        "Must start with uppercase",
        "Must contain a hyphen",
        "Must end with 'element'",
        "Must be all lowercase",
      ],
      correctAnswer: 1,
      explanation: "Custom element names must contain a hyphen to distinguish them from standard HTML elements.",
    },
    {
      id: 29,
      title: "HTML Templates",
      difficulty: "Very High" as const,
      description: "Using template elements",
      question: "What happens to content inside <template> tags?",
      options: [
        "It's displayed immediately",
        "It's hidden but parsed",
        "It's not parsed until activated",
        "It's deleted by the browser",
      ],
      correctAnswer: 2,
      explanation: "Content inside <template> tags is not parsed or rendered until activated by JavaScript.",
    },
    {
      id: 30,
      title: "HTML Accessibility",
      difficulty: "Very High" as const,
      description: "Advanced accessibility features",
      question: "Which ARIA attribute describes the purpose of an element?",
      options: ["aria-description", "aria-label", "aria-purpose", "aria-info"],
      correctAnswer: 1,
      explanation:
        "The 'aria-label' attribute provides an accessible name for an element when the visible text isn't sufficient.",
    },
  ],

  css: [
    // Easy Levels (1-10)
    {
      id: 1,
      title: "CSS Selectors",
      difficulty: "Easy" as const,
      description: "Understanding basic CSS selectors",
      question: "How do you select an element with class 'header'?",
      options: ["#header", ".header", "header", "*header"],
      correctAnswer: 1,
      explanation: "The dot (.) is used to select elements by class name in CSS.",
    },
    {
      id: 2,
      title: "CSS Colors",
      difficulty: "Easy" as const,
      description: "Setting colors in CSS",
      question: "Which property sets the text color?",
      options: ["text-color", "font-color", "color", "foreground"],
      correctAnswer: 2,
      explanation: "The 'color' property sets the color of text in CSS.",
    },
    {
      id: 3,
      title: "CSS Fonts",
      difficulty: "Easy" as const,
      description: "Styling text with fonts",
      question: "Which property changes the font size?",
      options: ["text-size", "font-size", "size", "font-scale"],
      correctAnswer: 1,
      explanation: "The 'font-size' property controls the size of text.",
    },
    {
      id: 4,
      title: "CSS Margins",
      difficulty: "Easy" as const,
      description: "Understanding margins",
      question: "What does margin create?",
      options: [
        "Space inside the element",
        "Space outside the element",
        "Border around the element",
        "Background color",
      ],
      correctAnswer: 1,
      explanation: "Margin creates space outside the element, between the element and its neighbors.",
    },
    {
      id: 5,
      title: "CSS Padding",
      difficulty: "Easy" as const,
      description: "Understanding padding",
      question: "What does padding create?",
      options: ["Space outside the element", "Space inside the element", "Border around the element", "Shadow effect"],
      correctAnswer: 1,
      explanation: "Padding creates space inside the element, between the content and the border.",
    },
    {
      id: 6,
      title: "CSS Borders",
      difficulty: "Easy" as const,
      description: "Adding borders to elements",
      question: "Which property sets all border properties at once?",
      options: ["border-all", "border", "border-style", "border-complete"],
      correctAnswer: 1,
      explanation: "The 'border' property is a shorthand that sets width, style, and color together.",
    },
    {
      id: 7,
      title: "CSS Width and Height",
      difficulty: "Easy" as const,
      description: "Setting element dimensions",
      question: "Which unit represents pixels?",
      options: ["pt", "px", "em", "%"],
      correctAnswer: 1,
      explanation: "'px' stands for pixels, which are absolute units of measurement.",
    },
    {
      id: 8,
      title: "CSS Text Decoration",
      difficulty: "Easy" as const,
      description: "Decorating text",
      question: "How do you remove underlines from links?",
      options: ["text-decoration: none", "underline: none", "link-decoration: none", "text-underline: none"],
      correctAnswer: 0,
      explanation: "'text-decoration: none' removes underlines, overlines, and line-through effects.",
    },
    {
      id: 9,
      title: "CSS Background",
      difficulty: "Easy" as const,
      description: "Setting background properties",
      question: "Which property sets the background color?",
      options: ["bg-color", "background-color", "color-background", "background"],
      correctAnswer: 1,
      explanation: "'background-color' specifically sets the background color of an element.",
    },
    {
      id: 10,
      title: "CSS Text Alignment",
      difficulty: "Easy" as const,
      description: "Aligning text content",
      question: "How do you center-align text?",
      options: ["align: center", "text-align: center", "text-center: true", "alignment: center"],
      correctAnswer: 1,
      explanation: "'text-align: center' centers the text horizontally within its container.",
    },

    // Medium Levels (11-20)
    {
      id: 11,
      title: "CSS Box Model",
      difficulty: "Medium" as const,
      description: "Understanding the CSS box model",
      question: "What does 'box-sizing: border-box' do?",
      options: [
        "Includes padding and border in width",
        "Excludes padding and border from width",
        "Only includes border in width",
        "Only includes padding in width",
      ],
      correctAnswer: 0,
      explanation: "'box-sizing: border-box' includes padding and border in the element's total width and height.",
    },
    {
      id: 12,
      title: "CSS Display Property",
      difficulty: "Medium" as const,
      description: "Understanding display values",
      question: "Which display value makes an element take full width?",
      options: ["inline", "block", "inline-block", "flex"],
      correctAnswer: 1,
      explanation: "'display: block' makes elements take the full available width and start on a new line.",
    },
    {
      id: 13,
      title: "CSS Positioning",
      difficulty: "Medium" as const,
      description: "Positioning elements",
      question: "Which position value removes an element from normal flow?",
      options: ["static", "relative", "absolute", "sticky"],
      correctAnswer: 2,
      explanation:
        "'position: absolute' removes the element from normal document flow and positions it relative to its nearest positioned ancestor.",
    },
    {
      id: 14,
      title: "CSS Float",
      difficulty: "Medium" as const,
      description: "Using float for layout",
      question: "What does 'clear: both' do?",
      options: [
        "Clears all margins",
        "Removes all floated elements",
        "Prevents floating on both sides",
        "Clears both left and right floats",
      ],
      correctAnswer: 3,
      explanation: "'clear: both' prevents the element from floating next to floated elements on either side.",
    },
    {
      id: 15,
      title: "CSS Z-Index",
      difficulty: "Medium" as const,
      description: "Controlling stacking order",
      question: "When does z-index work?",
      options: ["On all elements", "Only on positioned elements", "Only on block elements", "Only on inline elements"],
      correctAnswer: 1,
      explanation: "z-index only works on positioned elements (relative, absolute, fixed, or sticky).",
    },
    {
      id: 16,
      title: "CSS Overflow",
      difficulty: "Medium" as const,
      description: "Handling content overflow",
      question: "What does 'overflow: hidden' do?",
      options: [
        "Hides the entire element",
        "Clips overflowing content",
        "Makes content transparent",
        "Removes the element from layout",
      ],
      correctAnswer: 1,
      explanation: "'overflow: hidden' clips any content that overflows the element's boundaries.",
    },
    {
      id: 17,
      title: "CSS Pseudo-classes",
      difficulty: "Medium" as const,
      description: "Using pseudo-classes",
      question: "Which pseudo-class targets the first child element?",
      options: [":first", ":first-child", ":child-first", ":initial"],
      correctAnswer: 1,
      explanation: "':first-child' selects the first child element of its parent.",
    },
    {
      id: 18,
      title: "CSS Pseudo-elements",
      difficulty: "Medium" as const,
      description: "Using pseudo-elements",
      question: "Which property is required for ::before and ::after?",
      options: ["display", "content", "position", "visibility"],
      correctAnswer: 1,
      explanation: "The 'content' property is required for ::before and ::after pseudo-elements to appear.",
    },
    {
      id: 19,
      title: "CSS Gradients",
      difficulty: "Medium" as const,
      description: "Creating gradient backgrounds",
      question: "Which function creates a linear gradient?",
      options: ["gradient()", "linear-gradient()", "background-gradient()", "color-gradient()"],
      correctAnswer: 1,
      explanation: "'linear-gradient()' creates a smooth transition between multiple colors in a straight line.",
    },
    {
      id: 20,
      title: "CSS Shadows",
      difficulty: "Medium" as const,
      description: "Adding shadow effects",
      question: "Which property adds shadow to text?",
      options: ["box-shadow", "text-shadow", "shadow", "font-shadow"],
      correctAnswer: 1,
      explanation: "'text-shadow' adds shadow effects to text, while 'box-shadow' adds shadows to elements.",
    },

    // High Levels (21-27)
    {
      id: 21,
      title: "CSS Flexbox",
      difficulty: "High" as const,
      description: "Using Flexbox for layout",
      question: "Which property controls the main axis alignment in flexbox?",
      options: ["align-items", "justify-content", "flex-direction", "align-content"],
      correctAnswer: 1,
      explanation: "'justify-content' controls alignment along the main axis in flexbox layouts.",
    },
    {
      id: 22,
      title: "CSS Grid",
      difficulty: "High" as const,
      description: "Creating grid layouts",
      question: "Which property defines grid columns?",
      options: ["grid-columns", "grid-template-columns", "columns", "grid-column-template"],
      correctAnswer: 1,
      explanation: "'grid-template-columns' defines the size and number of columns in a CSS Grid.",
    },
    {
      id: 23,
      title: "CSS Media Queries",
      difficulty: "High" as const,
      description: "Creating responsive designs",
      question: "What does '@media (max-width: 768px)' target?",
      options: [
        "Screens wider than 768px",
        "Screens exactly 768px wide",
        "Screens 768px and narrower",
        "Only mobile devices",
      ],
      correctAnswer: 2,
      explanation: "'max-width: 768px' applies styles to screens that are 768px wide or narrower.",
    },
    {
      id: 24,
      title: "CSS Transforms",
      difficulty: "High" as const,
      description: "Transforming elements",
      question: "Which transform function rotates an element?",
      options: ["rotate()", "turn()", "spin()", "angle()"],
      correctAnswer: 0,
      explanation: "'rotate()' rotates an element around its center point by a specified angle.",
    },
    {
      id: 25,
      title: "CSS Transitions",
      difficulty: "High" as const,
      description: "Creating smooth transitions",
      question: "Which property sets the transition duration?",
      options: ["transition-time", "transition-duration", "animation-duration", "transition-speed"],
      correctAnswer: 1,
      explanation: "'transition-duration' specifies how long the transition effect takes to complete.",
    },
    {
      id: 26,
      title: "CSS Variables",
      difficulty: "High" as const,
      description: "Using CSS custom properties",
      question: "How do you declare a CSS variable?",
      options: ["$variable-name: value", "var-name: value", "--variable-name: value", "@variable-name: value"],
      correctAnswer: 2,
      explanation: "CSS variables are declared with '--' prefix and used with the var() function.",
    },
    {
      id: 27,
      title: "CSS Advanced Selectors",
      difficulty: "High" as const,
      description: "Using complex selectors",
      question: "What does 'div > p' select?",
      options: [
        "All p elements inside div",
        "Direct p children of div",
        "div elements inside p",
        "Adjacent p elements to div",
      ],
      correctAnswer: 1,
      explanation: "The '>' selector targets direct children only, not nested descendants.",
    },

    // Very High Levels (28-30)
    {
      id: 28,
      title: "CSS Animations",
      difficulty: "Very High" as const,
      description: "Creating keyframe animations",
      question: "Which rule defines animation keyframes?",
      options: ["@animation", "@keyframes", "@frames", "@animate"],
      correctAnswer: 1,
      explanation: "'@keyframes' defines the animation sequence by specifying CSS styles at various points.",
    },
    {
      id: 29,
      title: "CSS Grid Advanced",
      difficulty: "Very High" as const,
      description: "Advanced grid techniques",
      question: "What does 'grid-area' property do?",
      options: [
        "Sets grid container size",
        "Names a grid area",
        "Positions item in named area",
        "Both names and positions",
      ],
      correctAnswer: 3,
      explanation: "'grid-area' can both name grid areas and position items within named grid areas.",
    },
    {
      id: 30,
      title: "CSS Architecture",
      difficulty: "Very High" as const,
      description: "CSS methodologies and best practices",
      question: "What does BEM stand for in CSS methodology?",
      options: ["Block Element Modifier", "Base Element Module", "Block Entity Method", "Basic Element Model"],
      correctAnswer: 0,
      explanation: "BEM (Block Element Modifier) is a naming methodology for creating reusable CSS components.",
    },
  ],

  javascript: [
    // Easy Levels (1-10)
    {
      id: 1,
      title: "JavaScript Variables",
      difficulty: "Easy" as const,
      description: "Understanding variable declarations",
      question: "Which keyword creates a block-scoped variable?",
      options: ["var", "let", "const", "Both let and const"],
      correctAnswer: 3,
      explanation: "Both 'let' and 'const' create block-scoped variables, while 'var' is function-scoped.",
    },
    {
      id: 2,
      title: "JavaScript Functions",
      difficulty: "Easy" as const,
      description: "Creating and calling functions",
      question: "How do you call a function named 'myFunction'?",
      options: ["call myFunction", "myFunction()", "execute myFunction", "run myFunction()"],
      correctAnswer: 1,
      explanation: "Functions are called by writing the function name followed by parentheses.",
    },
    {
      id: 3,
      title: "JavaScript Arrays",
      difficulty: "Easy" as const,
      description: "Working with arrays",
      question: "How do you access the first element of an array?",
      options: ["array[1]", "array[0]", "array.first()", "array.get(0)"],
      correctAnswer: 1,
      explanation: "Array indexing starts at 0, so the first element is accessed with array[0].",
    },
    {
      id: 4,
      title: "JavaScript Objects",
      difficulty: "Easy" as const,
      description: "Creating and using objects",
      question: "How do you access the 'name' property of an object?",
      options: ["object->name", "object.name", "object[name]", "Both object.name and object['name']"],
      correctAnswer: 3,
      explanation:
        "Object properties can be accessed using dot notation (object.name) or bracket notation (object['name']).",
    },
    {
      id: 5,
      title: "JavaScript Conditionals",
      difficulty: "Easy" as const,
      description: "Using if statements",
      question: "Which operator checks for strict equality?",
      options: ["=", "==", "===", "equals"],
      correctAnswer: 2,
      explanation: "'===' checks for strict equality (same value and type), while '==' allows type coercion.",
    },
    {
      id: 6,
      title: "JavaScript Operators",
      difficulty: "Easy" as const,
      description: "Understanding operators",
      question: "What does the '&&' operator do?",
      options: ["Logical OR", "Logical AND", "Bitwise AND", "Assignment"],
      correctAnswer: 1,
      explanation: "'&&' is the logical AND operator that returns true only if both operands are true.",
    },
    {
      id: 7,
      title: "JavaScript Strings",
      difficulty: "Easy" as const,
      description: "Working with strings",
      question: "Which method returns the length of a string?",
      options: ["string.size()", "string.length", "string.count()", "string.len()"],
      correctAnswer: 1,
      explanation: "The 'length' property returns the number of characters in a string.",
    },
    {
      id: 8,
      title: "JavaScript Numbers",
      difficulty: "Easy" as const,
      description: "Working with numbers",
      question: "Which method rounds a number to the nearest integer?",
      options: ["Math.round()", "Math.floor()", "Math.ceil()", "Math.int()"],
      correctAnswer: 0,
      explanation: "Math.round() rounds to the nearest integer, while floor() rounds down and ceil() rounds up.",
    },
    {
      id: 9,
      title: "JavaScript Booleans",
      difficulty: "Easy" as const,
      description: "Understanding boolean values",
      question: "Which value is considered 'falsy' in JavaScript?",
      options: ["1", "true", "0", "'false'"],
      correctAnswer: 2,
      explanation: "0 is falsy in JavaScript. Other falsy values include false, null, undefined, '', and NaN.",
    },
    {
      id: 10,
      title: "JavaScript Template Literals",
      difficulty: "Easy" as const,
      description: "Using template literals",
      question: "Which character is used for template literals?",
      options: ["Single quotes '", 'Double quotes "', "Backticks `", "Forward slash /"],
      correctAnswer: 2,
      explanation: "Template literals use backticks (`) and allow embedded expressions with ${}.",
    },

    // Medium Levels (11-20)
    {
      id: 11,
      title: "JavaScript Loops",
      difficulty: "Medium" as const,
      description: "Understanding different loop types",
      question: "Which loop is best for iterating over array elements?",
      options: ["for loop", "while loop", "for...of loop", "do...while loop"],
      correctAnswer: 2,
      explanation: "The for...of loop is specifically designed for iterating over iterable objects like arrays.",
    },
    {
      id: 12,
      title: "JavaScript Array Methods",
      difficulty: "Medium" as const,
      description: "Using array methods",
      question: "Which method creates a new array with transformed elements?",
      options: ["forEach()", "map()", "filter()", "reduce()"],
      correctAnswer: 1,
      explanation: "map() creates a new array by calling a function on every element and returning the results.",
    },
    {
      id: 13,
      title: "JavaScript Object Methods",
      difficulty: "Medium" as const,
      description: "Working with object methods",
      question: "Which method returns an array of object keys?",
      options: ["Object.values()", "Object.keys()", "Object.entries()", "Object.properties()"],
      correctAnswer: 1,
      explanation: "Object.keys() returns an array containing all the property names (keys) of an object.",
    },
    {
      id: 14,
      title: "JavaScript Scope",
      difficulty: "Medium" as const,
      description: "Understanding variable scope",
      question: "What is the scope of a 'let' variable declared inside a block?",
      options: ["Global scope", "Function scope", "Block scope", "Module scope"],
      correctAnswer: 2,
      explanation:
        "'let' and 'const' have block scope, meaning they're only accessible within the block they're declared in.",
    },
    {
      id: 15,
      title: "JavaScript Arrow Functions",
      difficulty: "Medium" as const,
      description: "Using arrow function syntax",
      question: "Which is the correct arrow function syntax?",
      options: [
        "function => (x) { return x * 2; }",
        "(x) => { return x * 2; }",
        "x -> { return x * 2; }",
        "=> (x) { return x * 2; }",
      ],
      correctAnswer: 1,
      explanation: "Arrow functions use the syntax: (parameters) => { function body } or (parameters) => expression.",
    },
    {
      id: 16,
      title: "JavaScript Destructuring",
      difficulty: "Medium" as const,
      description: "Extracting values from arrays and objects",
      question: "How do you destructure the first two elements of an array?",
      options: ["let [a, b] = array", "let {a, b} = array", "let (a, b) = array", "let a, b = array"],
      correctAnswer: 0,
      explanation: "Array destructuring uses square brackets: let [a, b] = array extracts the first two elements.",
    },
    {
      id: 17,
      title: "JavaScript Spread Operator",
      difficulty: "Medium" as const,
      description: "Using the spread operator",
      question: "What does the spread operator (...) do with arrays?",
      options: ["Combines arrays", "Expands array elements", "Filters array elements", "Sorts array elements"],
      correctAnswer: 1,
      explanation:
        "The spread operator (...) expands array elements, useful for copying arrays or passing elements as arguments.",
    },
    {
      id: 18,
      title: "JavaScript Rest Parameters",
      difficulty: "Medium" as const,
      description: "Using rest parameters in functions",
      question: "What do rest parameters collect?",
      options: ["The first parameter", "The last parameter", "All remaining parameters", "Named parameters only"],
      correctAnswer: 2,
      explanation: "Rest parameters (...args) collect all remaining arguments into an array.",
    },
    {
      id: 19,
      title: "JavaScript Default Parameters",
      difficulty: "Medium" as const,
      description: "Setting default parameter values",
      question: "How do you set a default parameter value?",
      options: ["function test(x default 5)", "function test(x = 5)", "function test(x := 5)", "function test(x || 5)"],
      correctAnswer: 1,
      explanation: "Default parameters are set using the assignment operator: function test(x = 5).",
    },
    {
      id: 20,
      title: "JavaScript Error Handling",
      difficulty: "Medium" as const,
      description: "Handling errors with try-catch",
      question: "Which block always executes in error handling?",
      options: ["try", "catch", "finally", "error"],
      correctAnswer: 2,
      explanation: "The 'finally' block always executes, regardless of whether an error occurs or not.",
    },

    // High Levels (21-27)
    {
      id: 21,
      title: "JavaScript DOM Manipulation",
      difficulty: "High" as const,
      description: "Manipulating HTML elements",
      question: "Which method selects the first element matching a CSS selector?",
      options: ["getElementById()", "getElementsByClassName()", "querySelector()", "querySelectorAll()"],
      correctAnswer: 2,
      explanation: "querySelector() returns the first element that matches the specified CSS selector.",
    },
    {
      id: 22,
      title: "JavaScript Event Handling",
      difficulty: "High" as const,
      description: "Handling user interactions",
      question: "Which method adds an event listener to an element?",
      options: ["addEvent()", "addEventListener()", "attachEvent()", "onEvent()"],
      correctAnswer: 1,
      explanation: "addEventListener() is the standard method for attaching event handlers to elements.",
    },
    {
      id: 23,
      title: "JavaScript Closures",
      difficulty: "High" as const,
      description: "Understanding closures",
      question: "What is a closure in JavaScript?",
      options: [
        "A closed function",
        "A function with access to outer variables",
        "A function that returns nothing",
        "A private function",
      ],
      correctAnswer: 1,
      explanation:
        "A closure is a function that has access to variables in its outer (enclosing) scope even after the outer function returns.",
    },
    {
      id: 24,
      title: "JavaScript Callbacks",
      difficulty: "High" as const,
      description: "Using callback functions",
      question: "What is a callback function?",
      options: [
        "A function that calls itself",
        "A function passed as an argument",
        "A function that returns a function",
        "A function with no parameters",
      ],
      correctAnswer: 1,
      explanation: "A callback is a function passed as an argument to another function, to be executed later.",
    },
    {
      id: 25,
      title: "JavaScript Promises",
      difficulty: "High" as const,
      description: "Working with asynchronous operations",
      question: "Which method handles a resolved promise?",
      options: [".catch()", ".then()", ".finally()", ".resolve()"],
      correctAnswer: 1,
      explanation: ".then() handles the resolved state of a promise, while .catch() handles rejections.",
    },
    {
      id: 26,
      title: "JavaScript Async/Await",
      difficulty: "High" as const,
      description: "Modern asynchronous programming",
      question: "What does the 'await' keyword do?",
      options: ["Creates a promise", "Waits for a promise to resolve", "Rejects a promise", "Cancels a promise"],
      correctAnswer: 1,
      explanation: "'await' pauses the execution of an async function until the promise resolves or rejects.",
    },
    {
      id: 27,
      title: "JavaScript Fetch API",
      difficulty: "High" as const,
      description: "Making HTTP requests",
      question: "What does the fetch() function return?",
      options: ["JSON data", "A Promise", "An XMLHttpRequest", "A Response object"],
      correctAnswer: 1,
      explanation: "fetch() returns a Promise that resolves to a Response object representing the HTTP response.",
    },

    // Very High Levels (28-30)
    {
      id: 28,
      title: "JavaScript Classes",
      difficulty: "Very High" as const,
      description: "Object-oriented programming with classes",
      question: "Which method is called when creating a new instance?",
      options: ["init()", "constructor()", "create()", "new()"],
      correctAnswer: 1,
      explanation: "The constructor() method is automatically called when creating a new instance of a class.",
    },
    {
      id: 29,
      title: "JavaScript Modules",
      difficulty: "Very High" as const,
      description: "Organizing code with modules",
      question: "How do you export a default value from a module?",
      options: [
        "export default value",
        "export value as default",
        "default export value",
        "export { value as default }",
      ],
      correctAnswer: 0,
      explanation: "'export default value' exports a single default value from a module.",
    },
    {
      id: 30,
      title: "JavaScript Design Patterns",
      difficulty: "Very High" as const,
      description: "Advanced programming patterns",
      question: "What is the Singleton pattern used for?",
      options: [
        "Creating multiple instances",
        "Ensuring only one instance exists",
        "Copying objects",
        "Inheriting from multiple classes",
      ],
      correctAnswer: 1,
      explanation: "The Singleton pattern ensures that a class has only one instance and provides global access to it.",
    },
  ],

  python: [
    // Easy Levels (1-10)
    {
      id: 1,
      title: "Python Variables",
      difficulty: "Easy" as const,
      description: "Understanding Python variable assignment",
      question: "How do you assign the value 10 to a variable named 'x'?",
      options: ["x := 10", "x = 10", "var x = 10", "let x = 10"],
      correctAnswer: 1,
      explanation: "In Python, variables are assigned using the equals sign: x = 10",
    },
    {
      id: 2,
      title: "Python Print Function",
      difficulty: "Easy" as const,
      description: "Outputting text in Python",
      question: "How do you print 'Hello World' in Python?",
      options: ["echo('Hello World')", "console.log('Hello World')", "print('Hello World')", "printf('Hello World')"],
      correctAnswer: 2,
      explanation: "The print() function is used to output text in Python.",
    },
    {
      id: 3,
      title: "Python Strings",
      difficulty: "Easy" as const,
      description: "Working with text in Python",
      question: "Which method converts a string to uppercase?",
      options: [".uppercase()", ".upper()", ".toUpper()", ".UPPER()"],
      correctAnswer: 1,
      explanation: "The .upper() method converts all characters in a string to uppercase.",
    },
    {
      id: 4,
      title: "Python Numbers",
      difficulty: "Easy" as const,
      description: "Mathematical operations in Python",
      question: "Which operator performs integer division in Python?",
      options: ["/", "//", "div", "\\"],
      correctAnswer: 1,
      explanation: "The // operator performs floor division (integer division) in Python.",
    },
    {
      id: 5,
      title: "Python Lists",
      difficulty: "Easy" as const,
      description: "Working with Python lists",
      question: "How do you create an empty list in Python?",
      options: ["list = empty()", "list = []", "list = new List()", "list = list()"],
      correctAnswer: 1,
      explanation: "Empty lists are created using square brackets: [] or the list() constructor.",
    },
    {
      id: 6,
      title: "Python Dictionaries",
      difficulty: "Easy" as const,
      description: "Working with key-value pairs",
      question: "How do you create an empty dictionary?",
      options: ["dict = ()", "dict = []", "dict = {}", "dict = new Dict()"],
      correctAnswer: 2,
      explanation: "Empty dictionaries are created using curly braces: {} or the dict() constructor.",
    },
    {
      id: 7,
      title: "Python Conditionals",
      difficulty: "Easy" as const,
      description: "Using if statements in Python",
      question: "What comes after an if statement in Python?",
      options: ["Semicolon ;", "Colon :", "Curly brace {", "Parentheses ()"],
      correctAnswer: 1,
      explanation: "Python if statements end with a colon (:) and the code block is indented.",
    },
    {
      id: 8,
      title: "Python Booleans",
      difficulty: "Easy" as const,
      description: "Working with True/False values",
      question: "What are the boolean values in Python?",
      options: ["true, false", "TRUE, FALSE", "True, False", "1, 0"],
      correctAnswer: 2,
      explanation: "Python boolean values are True and False (with capital first letters).",
    },
    {
      id: 9,
      title: "Python Input",
      difficulty: "Easy" as const,
      description: "Getting user input",
      question: "Which function gets input from the user?",
      options: ["get_input()", "input()", "read()", "scan()"],
      correctAnswer: 1,
      explanation: "The input() function reads a line from input and returns it as a string.",
    },
    {
      id: 10,
      title: "Python Type Conversion",
      difficulty: "Easy" as const,
      description: "Converting between data types",
      question: "How do you convert a string to an integer?",
      options: ["integer(string)", "int(string)", "string.toInt()", "convert(string, int)"],
      correctAnswer: 1,
      explanation: "The int() function converts a string (or other compatible type) to an integer.",
    },

    // Medium Levels (11-20)
    {
      id: 11,
      title: "Python For Loops",
      difficulty: "Medium" as const,
      description: "Iterating with for loops",
      question: "How do you iterate over a list called 'items'?",
      options: ["for i in items:", "for (i in items):", "foreach i in items:", "for i of items:"],
      correctAnswer: 0,
      explanation: "Python for loops use the syntax: for item in iterable:",
    },
    {
      id: 12,
      title: "Python While Loops",
      difficulty: "Medium" as const,
      description: "Using while loops for repetition",
      question: "What happens if a while loop condition never becomes False?",
      options: [
        "The program crashes",
        "The loop runs forever",
        "Python stops the loop automatically",
        "An error is raised",
      ],
      correctAnswer: 1,
      explanation: "If the condition never becomes False, the while loop will run indefinitely (infinite loop).",
    },
    {
      id: 13,
      title: "Python Functions",
      difficulty: "Medium" as const,
      description: "Defining and calling functions",
      question: "How do you define a function in Python?",
      options: ["function myFunc():", "def myFunc():", "define myFunc():", "func myFunc():"],
      correctAnswer: 1,
      explanation: "Functions in Python are defined using the 'def' keyword followed by the function name.",
    },
    {
      id: 14,
      title: "Python Function Parameters",
      difficulty: "Medium" as const,
      description: "Using parameters in functions",
      question: "What does *args do in a function definition?",
      options: [
        "Creates a required parameter",
        "Accepts variable number of arguments",
        "Creates a keyword argument",
        "Multiplies arguments",
      ],
      correctAnswer: 1,
      explanation: "*args allows a function to accept any number of positional arguments as a tuple.",
    },
    {
      id: 15,
      title: "Python List Comprehensions",
      difficulty: "Medium" as const,
      description: "Creating lists with comprehensions",
      question: "What does [x*2 for x in range(5)] create?",
      options: ["[0, 1, 2, 3, 4]", "[0, 2, 4, 6, 8]", "[2, 4, 6, 8, 10]", "[1, 2, 3, 4, 5]"],
      correctAnswer: 1,
      explanation: "This creates [0, 2, 4, 6, 8] by multiplying each number from 0-4 by 2.",
    },
    {
      id: 16,
      title: "Python Tuples",
      difficulty: "Medium" as const,
      description: "Working with immutable sequences",
      question: "What is the main difference between lists and tuples?",
      options: ["Tuples are faster", "Tuples are immutable", "Tuples use less memory", "All of the above"],
      correctAnswer: 3,
      explanation: "Tuples are immutable (cannot be changed), generally faster, and use less memory than lists.",
    },
    {
      id: 17,
      title: "Python Sets",
      difficulty: "Medium" as const,
      description: "Working with unique collections",
      question: "What happens when you add a duplicate item to a set?",
      options: ["An error is raised", "The item is added twice", "Nothing happens", "The set is cleared"],
      correctAnswer: 2,
      explanation: "Sets automatically handle duplicates - adding a duplicate item has no effect.",
    },
    {
      id: 18,
      title: "Python String Formatting",
      difficulty: "Medium" as const,
      description: "Formatting strings with variables",
      question: "What does f'Hello {name}' represent?",
      options: ["A regular string", "A format string", "An f-string (formatted string literal)", "A function call"],
      correctAnswer: 2,
      explanation: "f-strings (f'...') allow embedding expressions inside string literals using {}.",
    },
    {
      id: 19,
      title: "Python Exception Handling",
      difficulty: "Medium" as const,
      description: "Handling errors gracefully",
      question: "Which block handles exceptions in Python?",
      options: ["catch", "except", "error", "handle"],
      correctAnswer: 1,
      explanation: "The 'except' block catches and handles exceptions in Python's try-except structure.",
    },
    {
      id: 20,
      title: "Python File Operations",
      difficulty: "Medium" as const,
      description: "Reading and writing files",
      question: "Which mode opens a file for writing?",
      options: ["'r'", "'w'", "'a'", "'x'"],
      correctAnswer: 1,
      explanation: "'w' mode opens a file for writing (overwrites existing content), 'a' for appending.",
    },

    // High Levels (21-27)
    {
      id: 21,
      title: "Python Classes",
      difficulty: "High" as const,
      description: "Object-oriented programming basics",
      question: "Which method is called when creating a new object?",
      options: ["__new__()", "__init__()", "__create__()", "__construct__()"],
      correctAnswer: 1,
      explanation: "__init__() is the constructor method called when creating a new instance of a class.",
    },
    {
      id: 22,
      title: "Python Inheritance",
      difficulty: "High" as const,
      description: "Creating class hierarchies",
      question: "How do you call a parent class method?",
      options: ["parent.method()", "super().method()", "base.method()", "inherit.method()"],
      correctAnswer: 1,
      explanation: "super() is used to call methods from the parent class in Python.",
    },
    {
      id: 23,
      title: "Python Decorators",
      difficulty: "High" as const,
      description: "Modifying function behavior",
      question: "What symbol is used to apply a decorator?",
      options: ["#", "@", "&", "%"],
      correctAnswer: 1,
      explanation: "The @ symbol is used to apply decorators to functions or classes.",
    },
    {
      id: 24,
      title: "Python Generators",
      difficulty: "High" as const,
      description: "Creating iterators with yield",
      question: "What keyword creates a generator function?",
      options: ["return", "yield", "generate", "iterator"],
      correctAnswer: 1,
      explanation: "The 'yield' keyword creates a generator function that can pause and resume execution.",
    },
    {
      id: 25,
      title: "Python Lambda Functions",
      difficulty: "High" as const,
      description: "Creating anonymous functions",
      question: "How do you create a lambda function that doubles its input?",
      options: ["lambda x: x * 2", "lambda(x): x * 2", "lambda x => x * 2", "lambda: x * 2"],
      correctAnswer: 0,
      explanation: "Lambda functions use the syntax: lambda parameters: expression",
    },
    {
      id: 26,
      title: "Python Map, Filter, Reduce",
      difficulty: "High" as const,
      description: "Functional programming concepts",
      question: "What does the map() function do?",
      options: [
        "Filters elements",
        "Applies a function to each element",
        "Reduces elements to a single value",
        "Sorts elements",
      ],
      correctAnswer: 1,
      explanation: "map() applies a function to each item in an iterable and returns a map object.",
    },
    {
      id: 27,
      title: "Python Context Managers",
      difficulty: "High" as const,
      description: "Using 'with' statements",
      question: "What is the advantage of using 'with' for file operations?",
      options: ["Faster file access", "Automatic file closing", "Better error messages", "Compressed file storage"],
      correctAnswer: 1,
      explanation: "The 'with' statement ensures files are automatically closed, even if an error occurs.",
    },

    // Very High Levels (28-30)
    {
      id: 28,
      title: "Python Metaclasses",
      difficulty: "Very High" as const,
      description: "Classes that create classes",
      question: "What is a metaclass in Python?",
      options: [
        "A class inside another class",
        "A class that creates other classes",
        "A class with multiple inheritance",
        "An abstract class",
      ],
      correctAnswer: 1,
      explanation:
        "A metaclass is a class whose instances are classes themselves - it defines how classes are created.",
    },
    {
      id: 29,
      title: "Python Async/Await",
      difficulty: "Very High" as const,
      description: "Asynchronous programming",
      question: "What keyword defines an asynchronous function?",
      options: ["async", "await", "asyncio", "concurrent"],
      correctAnswer: 0,
      explanation: "'async def' defines an asynchronous function, and 'await' is used to wait for async operations.",
    },
    {
      id: 30,
      title: "Python Data Structures",
      difficulty: "Very High" as const,
      description: "Advanced data structure concepts",
      question: "Which data structure provides O(1) average case for insertions and lookups?",
      options: ["List", "Tuple", "Dictionary", "Set"],
      correctAnswer: 2,
      explanation: "Dictionaries (hash tables) provide O(1) average case time complexity for insertions and lookups.",
    },
  ],

  cpp: [
    // Easy Levels (1-10)
    {
      id: 1,
      title: "C++ Hello World",
      difficulty: "Easy" as const,
      description: "Understanding basic C++ program structure",
      question: "Which header file is needed for cout?",
      options: ["#include <stdio.h>", "#include <iostream>", "#include <cout>", "#include <output>"],
      correctAnswer: 1,
      explanation: "#include <iostream> provides access to cout, cin, and other input/output stream objects.",
    },
    {
      id: 2,
      title: "C++ Variables",
      difficulty: "Easy" as const,
      description: "Declaring variables in C++",
      question: "How do you declare an integer variable named 'age'?",
      options: ["integer age;", "int age;", "var age: int;", "age as int;"],
      correctAnswer: 1,
      explanation: "In C++, integers are declared using the 'int' keyword: int age;",
    },
    {
      id: 3,
      title: "C++ Input/Output",
      difficulty: "Easy" as const,
      description: "Using cin and cout",
      question: "Which operator is used with cout for output?",
      options: [">>", "<<", "->", "<-"],
      correctAnswer: 1,
      explanation: 'The << operator is used with cout for output: cout << "Hello";',
    },
    {
      id: 4,
      title: "C++ Arithmetic",
      difficulty: "Easy" as const,
      description: "Basic mathematical operations",
      question: "Which operator gives the remainder of division?",
      options: ["/", "%", "//", "mod"],
      correctAnswer: 1,
      explanation: "The % operator (modulus) returns the remainder after division.",
    },
    {
      id: 5,
      title: "C++ Conditionals",
      difficulty: "Easy" as const,
      description: "Using if statements",
      question: "What symbols are used for the 'not equal' comparison?",
      options: ["<>", "!=", "=/=", "not="],
      correctAnswer: 1,
      explanation: "!= is the 'not equal to' operator in C++.",
    },
    {
      id: 6,
      title: "C++ Comparison Operators",
      difficulty: "Easy" as const,
      description: "Comparing values",
      question: "Which operator checks if two values are equal?",
      options: ["=", "==", "===", "eq"],
      correctAnswer: 1,
      explanation: "== is the equality comparison operator, while = is for assignment.",
    },
    {
      id: 7,
      title: "C++ Logical Operators",
      difficulty: "Easy" as const,
      description: "Using logical operators",
      question: "Which operator represents logical AND?",
      options: ["&", "&&", "and", "AND"],
      correctAnswer: 1,
      explanation: "&& is the logical AND operator in C++.",
    },
    {
      id: 8,
      title: "C++ Switch Statement",
      difficulty: "Easy" as const,
      description: "Using switch for multiple conditions",
      question: "What keyword is used to exit a switch case?",
      options: ["exit", "break", "return", "continue"],
      correctAnswer: 1,
      explanation: "'break' is used to exit a switch case and prevent fall-through to the next case.",
    },
    {
      id: 9,
      title: "C++ Constants",
      difficulty: "Easy" as const,
      description: "Declaring constant values",
      question: "Which keyword makes a variable constant?",
      options: ["constant", "const", "final", "readonly"],
      correctAnswer: 1,
      explanation: "The 'const' keyword makes a variable constant (unchangeable after initialization).",
    },
    {
      id: 10,
      title: "C++ Type Casting",
      difficulty: "Easy" as const,
      description: "Converting between data types",
      question: "How do you cast a float to an int?",
      options: ["int(floatVar)", "(int)floatVar", "static_cast<int>(floatVar)", "All of the above"],
      correctAnswer: 3,
      explanation: "C++ supports multiple casting methods: C-style (int), functional int(), and static_cast<int>().",
    },

    // Medium Levels (11-20)
    {
      id: 11,
      title: "C++ For Loops",
      difficulty: "Medium" as const,
      description: "Using for loops for iteration",
      question: "What is the correct syntax for a for loop?",
      options: ["for (int i = 0; i < 10; i++)", "for (i = 0 to 10)", "for i in range(10)", "for (i from 0 to 10)"],
      correctAnswer: 0,
      explanation: "C++ for loops use the syntax: for (initialization; condition; increment)",
    },
    {
      id: 12,
      title: "C++ While Loops",
      difficulty: "Medium" as const,
      description: "Using while loops",
      question: "What's the difference between while and do-while loops?",
      options: ["No difference", "do-while executes at least once", "while is faster", "do-while is deprecated"],
      correctAnswer: 1,
      explanation: "do-while loops execute the body at least once before checking the condition.",
    },
    {
      id: 13,
      title: "C++ Arrays",
      difficulty: "Medium" as const,
      description: "Working with arrays",
      question: "How do you declare an array of 10 integers?",
      options: ["int array[10];", "int[10] array;", "array<int, 10>;", "int array(10);"],
      correctAnswer: 0,
      explanation: "Arrays are declared as: datatype arrayName[size];",
    },
    {
      id: 14,
      title: "C++ Functions",
      difficulty: "Medium" as const,
      description: "Defining and calling functions",
      question: "What must a function declaration include?",
      options: [
        "Only the function name",
        "Return type, name, and parameters",
        "Only return type and name",
        "Only parameters",
      ],
      correctAnswer: 1,
      explanation: "Function declarations must include return type, function name, and parameter list.",
    },
    {
      id: 15,
      title: "C++ Function Overloading",
      difficulty: "Medium" as const,
      description: "Creating multiple functions with same name",
      question: "What allows function overloading in C++?",
      options: [
        "Different return types",
        "Different parameter lists",
        "Different function names",
        "Different access modifiers",
      ],
      correctAnswer: 1,
      explanation: "Function overloading is based on different parameter lists (number, types, or order).",
    },
    {
      id: 16,
      title: "C++ Strings",
      difficulty: "Medium" as const,
      description: "Working with string objects",
      question: "Which header is needed for the string class?",
      options: ["#include <cstring>", "#include <string>", "#include <str>", "#include <text>"],
      correctAnswer: 1,
      explanation: "#include <string> provides the std::string class for string manipulation.",
    },
    {
      id: 17,
      title: "C++ Pointers",
      difficulty: "Medium" as const,
      description: "Understanding memory addresses",
      question: "What does the * operator do with pointers?",
      options: ["Gets the address", "Dereferences the pointer", "Multiplies the pointer", "Deletes the pointer"],
      correctAnswer: 1,
      explanation: "The * operator dereferences a pointer, accessing the value at the memory address.",
    },
    {
      id: 18,
      title: "C++ References",
      difficulty: "Medium" as const,
      description: "Using references as aliases",
      question: "How do you declare a reference to an integer variable?",
      options: ["int* ref = &var;", "int& ref = var;", "int ref& = var;", "ref int = var;"],
      correctAnswer: 1,
      explanation: "References are declared as: datatype& referenceName = variable;",
    },
    {
      id: 19,
      title: "C++ Dynamic Memory",
      difficulty: "Medium" as const,
      description: "Allocating memory at runtime",
      question: "Which operator allocates memory dynamically?",
      options: ["malloc", "new", "alloc", "create"],
      correctAnswer: 1,
      explanation: "The 'new' operator allocates memory dynamically and returns a pointer.",
    },
    {
      id: 20,
      title: "C++ Structures",
      difficulty: "Medium" as const,
      description: "Grouping related data",
      question: "What is the default access level in a struct?",
      options: ["private", "public", "protected", "internal"],
      correctAnswer: 1,
      explanation: "In structs, members are public by default (unlike classes where they're private).",
    },

    // High Levels (21-27)
    {
      id: 21,
      title: "C++ Classes and Objects",
      difficulty: "High" as const,
      description: "Object-oriented programming basics",
      question: "What is the default access level in a class?",
      options: ["public", "private", "protected", "internal"],
      correctAnswer: 1,
      explanation: "In classes, members are private by default (unlike structs where they're public).",
    },
    {
      id: 22,
      title: "C++ Constructors and Destructors",
      difficulty: "High" as const,
      description: "Object initialization and cleanup",
      question: "When is a destructor called?",
      options: [
        "When object is created",
        "When object goes out of scope",
        "When object is copied",
        "When object is modified",
      ],
      correctAnswer: 1,
      explanation: "Destructors are automatically called when an object goes out of scope or is explicitly deleted.",
    },
    {
      id: 23,
      title: "C++ Inheritance",
      difficulty: "High" as const,
      description: "Creating class hierarchies",
      question: "Which access specifier allows derived classes to access base members?",
      options: ["private", "protected", "public", "Both protected and public"],
      correctAnswer: 3,
      explanation: "Both protected and public members of base class are accessible to derived classes.",
    },
    {
      id: 24,
      title: "C++ Polymorphism",
      difficulty: "High" as const,
      description: "Runtime behavior selection",
      question: "What keyword enables runtime polymorphism?",
      options: ["override", "virtual", "abstract", "polymorphic"],
      correctAnswer: 1,
      explanation: "The 'virtual' keyword enables runtime polymorphism through virtual function calls.",
    },
    {
      id: 25,
      title: "C++ Operator Overloading",
      difficulty: "High" as const,
      description: "Customizing operator behavior",
      question: "How do you overload the + operator?",
      options: ["operator+()", "+operator()", "overload+()", "plus_operator()"],
      correctAnswer: 0,
      explanation: "Operators are overloaded using the 'operator' keyword followed by the operator symbol.",
    },
    {
      id: 26,
      title: "C++ Templates",
      difficulty: "High" as const,
      description: "Generic programming",
      question: "How do you declare a template function?",
      options: [
        "generic<T> function",
        "template<typename T>",
        "template<class T>",
        "Both template<typename T> and template<class T>",
      ],
      correctAnswer: 3,
      explanation: "Both 'typename' and 'class' keywords can be used in template declarations.",
    },
    {
      id: 27,
      title: "C++ Exception Handling",
      difficulty: "High" as const,
      description: "Handling runtime errors",
      question: "Which block catches exceptions?",
      options: ["except", "catch", "handle", "error"],
      correctAnswer: 1,
      explanation: "The 'catch' block handles exceptions thrown by the 'try' block.",
    },

    // Very High Levels (28-30)
    {
      id: 28,
      title: "C++ STL Containers",
      difficulty: "Very High" as const,
      description: "Standard Template Library containers",
      question: "Which STL container provides dynamic array functionality?",
      options: ["array", "vector", "list", "deque"],
      correctAnswer: 1,
      explanation: "std::vector provides dynamic array functionality with automatic resizing.",
    },
    {
      id: 29,
      title: "C++ STL Algorithms",
      difficulty: "Very High" as const,
      description: "Using STL algorithms",
      question: "Which header contains STL algorithms like sort()?",
      options: ["#include <algorithm>", "#include <algorithms>", "#include <sort>", "#include <stl>"],
      correctAnswer: 0,
      explanation: "#include <algorithm> contains STL algorithms like sort(), find(), and transform().",
    },
    {
      id: 30,
      title: "C++ Smart Pointers",
      difficulty: "Very High" as const,
      description: "Modern memory management",
      question: "Which smart pointer allows only one owner?",
      options: ["shared_ptr", "unique_ptr", "weak_ptr", "auto_ptr"],
      correctAnswer: 1,
      explanation: "unique_ptr ensures exclusive ownership of a resource and cannot be copied.",
    },
  ],
}
